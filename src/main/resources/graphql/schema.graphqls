type Student {
    id: Int!
    firstName: String!
    lastName: String!
    age: Int!
    numberOfCourses: Int!
    courses: [SlimCourse]!
}

type SlimStudent {
    id: Int!
    firstName: String!
    lastName: String!
    age: Int!
}

type Course {
    id: Int!
    courseName: String!
    numberOfStudents: Int!
    students: [SlimStudent]!
}

type SlimCourse {
    id: Int!
    courseName: String!
}

type Query {
    allCourses: [Course]
    allStudents: [Student]
    unpopularCourses: [Course]
    popularCourses: [Course]
    lazyStudents: [Student]
    eagerStudents: [Student]
}

input CreateStudent {
    firstName: String!
    lastName: String!
    age: Int!
}

input CreateCourse {
    courseName: String!
}

input UpdateStudent {
    id: Int!
    firstName: String!
    lastName: String!
    age: Int!
}

input UpdateCourse {
    id: Int!,
    courseName: String!
}

type Mutation {
    createStudent(input: CreateStudent!): Student
    createCourse(input: CreateCourse!): Course
    updateStudent(input: UpdateStudent!): Student
    updateCourse(input: UpdateCourse!): Course
    deleteStudent(id: Int!): Boolean
    deleteCourse(id: Int!): Boolean
    enrollStudentInCourse(studentId: Int!, courseId: Int!): Student
    unEnrollStudentFromCourse(studentId: Int!, courseId: Int!): Student
}