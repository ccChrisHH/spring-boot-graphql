type Student {
    id: Int
    firstName: String
    lastName: String
    age: Int
    courses: [Course]
}

type Course {
    id: Int
    courseName: String
    students: [Student]
}

type SimplifiedStudent {
    id: Int
    firstName: String
    lastName: String
    age: Int
    numberOfCourses: Int
}

type SimplifiedCourse {
    id: Int
    courseName: String
    numberOfStudents: Int
}

type Query {
    allCourses: [Course]
    allStudents: [Student]
    unpopularCourses: [SimplifiedCourse]
    popularCourses: [SimplifiedCourse]
    lazyStudents: [SimplifiedStudent]
    eagerStudents: [SimplifiedStudent]
}

input StudentInput {
    firstName: String!
    lastName: String!
    age: Int!
}

input CourseInput {
    courseName: String!
}

input StudentUpdate {
    id: Int!
    firstName: String!
    lastName: String!
    age: Int!
}

input CourseUpdate {
    id: Int!,
    courseName: String!
}

type Mutation {
    createStudent(input: StudentInput): Student
    createCourse(input: CourseInput): Course
    updateStudent(input: StudentUpdate): Student
    updateCourse(input: CourseUpdate): Course
    deleteStudent(id: Int!): Boolean
    deleteCourse(id: Int!): Boolean
    enrollStudentInCourse(studentId: Int!, courseId: Int!): Student
    unEnrollStudentFromCourse(studentId: Int!, courseId: Int!): Student
}